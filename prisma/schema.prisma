// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  bio           String?
  username      String?         @unique
  experience    String?
  
  accounts      Account[]
  recipes       Recipe[]
  ratings       Rating[]
  comments      Comment[]
  
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model Recipe {
  id    String @id @default(cuid())   
  userId            String        
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)    
  title              String
  image              String
  description        String
  servings           String
  cookingTimeHours   String
  cookingTimeMinutes String
  PrepTimeHours      String
  PrepTimeMinutes    String
  cuisine            String

  ingredients        Ingredient[]  // Relation
  instructions       Instruction[] // Relation
  nutrition          Nutrition?    // Relation
  ratings            Rating[]      // Relation
  comments    Comment[]

  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

model Ingredient {
  id        String  @id @default(cuid())
  name      String
  recipeId  String
  recipe    Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model Instruction {
  id        String  @id @default(cuid())
  step      String
  recipeId  String
  recipe    Recipe  @relation(fields: [recipeId], references: [id],onDelete: Cascade)
}
model Nutrition {
  id             Int     @id @default(autoincrement())
  calories       Int
  protein        Int
  fats           Int
  carbohydrates  Int
  fiber          Int
  netCarbs       Int
  sodium         Int
  cholesterol    Int
  recipeId      String  @unique
  recipe         Recipe  @relation(fields: [recipeId], references: [id],onDelete: Cascade)
  
}

model Rating {
  id        String   @id @default(uuid())
  value     Int      // 1 to 5 (for stars)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId  String
  createdAt DateTime @default(now())

  @@unique([userId, recipeId])
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId  String
  
  parentId  String?  // For nested replies (optional)
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id],onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}
