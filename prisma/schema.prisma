// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  
  accounts      Account[]
  recipes       Recipe[]
  
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model Recipe{
  id       String   @id @default(cuid())
  title    String
  description String
  ingredients String[]
  instructions String[]
  imageUrl String
  servings Int
  cookingTime Int
  prepTime Int
  cuisine String
  collection String
  calories String
  carbs String
  protein String
  fats  String
  fiber String
  netCarbs String
  sodium String
  cholesterol String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId   String
  user     User     @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}
